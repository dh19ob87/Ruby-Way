# El hola mundo de dos formas diferentes.

print "Hola mundo" #Imprime Hola mundo sin ingresar un enter \n.
puts "Hola mundo" # Imprime un Hola mundo con un enter añadido de modo que la expresión que retorna la IRB se imprime en otra línea.

# Operaciones básicas directas.
2+2
3/2 # Éstas operaciones retornan un valor entero redondeado por lo que es necesario indicar a la IRB que se trabaja con Float del siguiente modo
3.0/2.0
3.0/2
3/2.0 #Cualquiera de las anteriores expresiones retorna un valor decimal con una precisión de 1 decimal.

# En Ruby todo son objetos de modo que un número es una instancia de alguna clase
# Por ejemplo 2 es un objeto de la clase Integer, 2.0 pertenece a la clase Float, "a" a la clase string, etc.
# Para conocer a qué clase pertenece un objeto se llama al método class, del siguiente modo
puts 2.class
2.class
"Hola".class
(2.0).class
Primera_clase.class # Para el caso de una instancia de alguna clase, o sea, un objeto.

# Creando la primera clase. Ruby maneja un paradigma de programación orientado a objetos

class Persona
  attr_accessor :nombre, :apellido, :edad, :genero
end

    # Para crear un objeto de la clase Persona, una instancia se procede del siguiente modo.
    
    Humano = Persona.new
    
    # Para ingresar información a algún campo se procede así
    
    Humano.nombre = "Diego"
    Humano.apellido = "Hernando"
    Humano.edad = 30
    Humano.genero = "Masculino"
    
    Humano.class # Practicando lo anterior, retorna <<Persona>> que es la clase de la que proviene el objeto.
    
# Herencia entre clases.

class Mascota
  attr_accessor :nombre, :edad, :color, :genero
end

class Perro < Mascota
end

  # De este modo la clase perro hereda de la clase mascota todos los atributos, es decir, nombre, edad, color, genero
  
  Canino = Perro.new
  Canino.nombre = "Luna"
  Canino.edad = 4
  Canino.color = "Bicolor café blanco"
  Canino.genero = "Femenino"
  
class Gato < Mascota
  attr_accesor :raza
end
  
  # Entonces la clase Gato hereda los campos de la clase mascota y adicionalmente añado un campo único de la clase Mascota llamado raza.
  

# Definir métodos en Ruby

class Ave < Mascota
  def Piar
    puts "Pio pio"
  end
end




# Kernel métodos.
# Los métodos del módulo Kernel son aquellos que están disponibles en todo momento sin la necesidad de señalar la clase a la que pertenece
# tal es el caso de la instrucción <<puts>>, de hecho se puede llamar al método desde el módulo al que pertenece del siguiente modo:

Kernel.puts "Hola" # Sin embargo, es muy inconveniente hacer esto porque el método es accesible desde cualquier parte está en el scope de toda clase.


# Métodos con argumentos

class Perro < Mascotas
  def Ladrar_mas (i)
    i.times do
      puts "¡Woof!"
    end
  end
end

Luna = Perro.new
Luna.ladrar_mas (3) # Con esto obtenemos 3 veces el mensaje.

  #Un método con varios argumentos se realiza del siguiente modo
  
class Perro
  def Orden (a, b, c)
    puts a
    puts b
    puts c
  end
end

Luna.Orden("Sentado", "Quieto", "Ven")


# Métodos de clases, ejemplo clase String

puts "Hola Diego, te la volvieron a hacer y tan tierna que se ve".length # Retorna la cantidad de caracteres en la cadena, cuenta espacios en blanco.

puts "Pon esta vaina en mayúscula".upcase # Retorna "PON ESTA VAINA EN MAYÚSCULA"

"Diego " + "Hernando " + "El Krillin" # Concatenación de cadenas de String

"DIEGO".downcase # Pasa a minúsculas
"diego".upcase # Pasa a mayúsculas
"diego".capitalize # "Diego"
"diego".chop # "Dieg"
"diego".next # "Diegp"
"diego".reverse # "ogeid"
"DiEgO".swapcase # "dIeGo"
"diego".upcase.reverse # "OGEID"
"diego".upcase.reverse.next # "OGEIE"

    #Ocurre que las instucciones se pueden concatenar de este modo porque tras la ejecución de cada uno de ellos se retorna el valor que el próximmo método acepta como argumento.
    

# If, unless y between
 
x = 10
puts "Tienes el empleo" if (x > 1) # Obtenemos entonces el mensaje "Tienes el empleo" porque x sí es mayor que 1
 
puts "No tienes el empleo" unless (x > 20) # Obtenemos el mensaje "Tienes el empleo" porque x no es mayor que 20 <<Unless>> es el equivalente a decir sí la condición es falsa entonces has esto.
 
x.between?(1, 20) # Retorna <<true>>
 
puts "Sí se encuentra en el valor requerido" if(x.between?(1, 20)) # Entonces obtenemos el mesaje <<Sí se encuentra en el valor requerido>>




