# Segundo día. Iteradores y bloques

5.times do puts "Segundo día" end # Hacemos uso del método times probablemente del Kernel porque es accesible sin clase. La instrucción 5.times.class => Enumerator

  #Si la instrucción consta de una sola instrucción se puede escribir como
  
  5.times {puts "En caso de que solo sea una instrucción"}
  
x = 0
x.upto(5) {puts (x+=1).to_s}

x = 10
x.downto(0) {puts (x-=1).to_s}

x = 0
x.step(10, 2){puts (x+=1).to_s} # 1 2 3 4 5 6
x = 0
x.step(10, 5){puts (x+1).to_s} # 1 2 3

  #Una manera más limpia de ver el resultado.
  
1.upto(5){|number| puts number} # De este modo se declara una variable <<number>> dentro del bloque y se imprime su valor 1 2 3 4 5

  # Es decir, el valor de cada iteración se almacena en |number|, éste es el modo en que Ruby para variables entre bloques.



10.downto(0){|number| puts number} # 10 9 8 7 6 5 4 3 2 1 0
0.step(10, 2){|number| puts number} # 0 2 4 6 8 10



# Nota de operaciones con float, debido a que Ruby considera todo número como entero a no ser que se indique explícitamente que es un decimal
# en el caso de un valor ingresado se puede solucionar convirtiendo on the fly el valor ingresado x.to_f y el proceso también se puede hacer para enteros x.to_i

#Las constantes en Ruby se definen con la primera letra de la variable en mayúscula.

Pi = 3.141592
  # De este modo, al tratar de cambiar el valor de la variable obtenemos una advertencia indicando que el valor de la constante se ha cambiado on the fly
  

# Strings

x = "String literal" # Por supuesto es un literal, el de la variable.

  #Cuando se desea incluir un string de multiples lineas se usa.
  
x = %q{ Según esto estas metido en líos
aún falta mucho y esto es puros objetos
esto se enreda} # De acuerdo a la documentación se puede usar cualquier par de llaves, incluso dos llaves iguales como !! pero en donde la IRB encuentre el par contrario o igual deja de interpretar líneas causando error por el resto del string

y = %q[ Este es otro ejemplo de string multilinea
de acuerdo a la documentación cualquier par de llaves sirve]

  #Finalmente disponemos del concepto <<here document>> 

x = <<CIERRA_AQUI
Se trata de un texto, un string representando un texto grande
en el que podemos escribir tanto hasta que se encuentre con la etiqueta que definimos
para cerrar el documento. Se inicia con dos símbolos de menor que y se define la
etiqueta en mayúsculas.
CIERRA_AQUI

puts "diego "*2 # diego diego
puts "a" > "b" # false
puts "a" < "b" # true
# Ya que los strings se pueden comparar es posible determinar el valor de cada caracter del siguiente modo.

puts "A".ord # 65
puts "a".ord # 97

# Lo contrario se puede obtener con

puts 65.chr # A
puts 97.chr # a

# Interpolación de strings (terminología de Ruby)
  # Mediante éste método es posible operar sentencias, expresiones o lógica dentro de los Strings.

a = 10
b = 20
puts "#{a} + #{b} = #{a+b}" # 10 + 20 = 30

nombre =  "Diego"
x = 5
y = 10

puts "Cuando mi mamá se enoja me llama hasta #{y} veces y puede repetir mi nombre #{x} veces en menos de #{x-4} segundo. Entonces valgo verga así: #{nombre*5}"

  #También se puede interpolar en asignación de variables.
  
mensaje = "Amigo serás #{"Verga " * 5}"

# Expresiones regulares en String

puts "Me gusta Tatiana.".sub('Tatiana', 'Alejadra') # De modo que tenemos una sustitución.

  #Para sustituciones en grupo se usa <<gsub>>
  
puts "Otrora Diego, Tatiana amaba. Tatiana se puso complicada y puso pesada la vaina. Tatiana me dejó y consiguió novio como si nada, ahora vuelve a joder con el cuento de que me ama, o sea, Tatiana que madres.".gsub('Tatiana','Alejandra')
  
  # Reemplazando texto en una línea Expresiones Regulares

cadena = "Danna"
  
cadena.sub(/^../, 'Alejandra') # De ésta instrucción tenemos dos cosas nuevas el <<anchor /^./>> dentro del que se incluye mediante puntos la cantidad de caracteres que se desean reemplazar con el string ingresado.

cadena.sub(/^.../, 'Diego') # Diegona

cadena.sub(/^./, 'L') # Lanna

cadena.sub(/..$/, 'Diego') # DanDiego | como se observa en el resultado en este caso se actúa desde el final de la línea.

cadena.sub(/....$/, 'Luna') # DLuna

cadena.sub(/....$/, 'L') # DL

# Los resultados varian si se trata no de un literal sino de un texto o una cadena String de múltiples líneas,

mensaje =  <<HAGAME_EL_FAVOR
Ruby es un lenguaje de programación de muy alto nivel
no suele ser de mi agrado tener algo tan sencillo de manejar
porque me preocupa lo que se encuentra detrás de todo éste sistema tan elaborado
me da curiosidad.
HAGAME_EL_FAVOR #Como resultado obtenemos una cadena con <<comandos>> como <<\n>> y los <<anchor>> vistos sólo actúan sobre la primera linea.

mensaje.sub(/^../, "Diego")

=begin
Diegoby es un lenguaje de programación de muy alto nivel
no suele ser de mi agrado tener algo tan sencillo de manejar
porque me preocupa lo que se encuentra detrás de todo éste sistema tan elaborado
me da curiosidad.
=end

mensaje.sub(/...$/, 'Diego')

=begin
Ruby es un lenguaje de programación de muy alto nivel
no suele ser de mi agrado tener algo tan sencillo de manejar
porque me preocupa lo que se encuentra detrás de todo éste sistema tan elaborado
me da curiosidDiego
=end

  #Para que la expresión regular funcione correctamente sobre todo el String es necesario usar el <<anchor>> /\A/ para que se realice la operación sobre el inicio de toda la cadena y /\z/ para que se realice la operación sobre el final de toda la cadena.
  
mensaje.sub(/\z/, 'Diego')

=begin
Ruby es un lenguaje de programación de muy alto nivel
no suele ser de mi agrado tener algo tan sencillo de manejar
porque me preocupa lo que se encuentra detrás de todo éste sistema tan elaborado
me da curiosidad.
Diego
=end

# Iterar sobre expresiones regulares

mensaje = "Este es un mensaje de prueba"
mensaje.scan(/./) # E,s,t,e, ,e,s, ,u,n, ,m,e,n,s,a,j,e, ,d,e, ,p,r,u,e,b,a
"Este es un mensaje de prueba".scan(/..../) {|letras| puts letras} # Este, es ,un m,ensa,je d,e pr,ueba
mensaje.scan(/..../)

# Extraer lo números de un String o las letras de un string

mensaje = "Aquí hay un total de 6 números, está el 5 o el 9 o el 10 y el 15 -* 35"

enorme = %q{ Esta es una cadena larga con 3 filas
y muchos números entre estos 12056
para probar el funcionamiento de scan en una cadena y no un literal.}

mensaje.scan(/./) # Retorna cada caracter del literal.
enorme.scan(/./) # Retorna cada caracter del String.

enorme.scan(/\d/) # Retorna todos los números en el String digito por digito
enorme.scan(/\d+/) # Retorna los números que hay en la cadena como cifras tal cual como se encuentran en la cadena.
"Esta es una cadena larga con 3 filas y muchos números entre estos 12056 para probar el funcionamiento de scan en una cadena y no un literal.".scan(/\d+/) do |resultado| puts resultado end

"En este largo literal se encuentra un solo númer0 que podría, dependiendo del editor de texto, confundirse con una o".scan(/0/) # Con ésto se puede observar que <<scan>> permite buscar en el texto caracteres o palabras.
"En este largo literal se encuentra un solo númer0 que podría, dependiendo del editor de texto, confundirse con una o".scan(/literal/)




  #Matching operador =~ y <<match>> sirve para comparar cadenas de caracteres y a su vez preguntar si existe algún caracter dentro de las cadenas
  
puts "Aquí no hay números" if ("Comparamos con números 1 2 3 4" =~ /[0-9]/) 

puts "Me quiero tirar a Alejandra" unless ("123" =~ /[0-9]/)

"Coincidencia".match(/[a-f]/)
  # Con match se puede hacer esto.
  
x = "Esto es un mensaje regular".match(/(\w+) (\w+)/)



#Arrays

array = [1,2,3,4,5,6]
array [0] # 1
array [0] -= 1
array [3] = 400
  # Array vacios son válidos en Ruby
vacio = []

  # Para agregar información a la última posición usamos <<
array << 7 #[1 2 3 4 5 6 7]

texto_array = []
texto_array << "Primero" # Se obtiene el mismo resultado con texto_array.push("Primero") texto_array.push("Segundo")
texto_array << "Segundo"

  # Para remover se usa pop y retira el último item ingresado en el array último en entrar primero en salir.
  
texto_array.pop
texto_array.length
puts texto_array

  # Se pueden juntar los elementos del array.
  
array_numero = [1, 2, 3, 4, 5]
array_numero.join

"Esto es una prueba".scan(/\w/).join('-') # Escanea la cadena en busca de caracteres y digitos para unirlos con guiones o comas.

"La penumbra no es nada. a tú lado porque en ti puedo imaginar. el mundo que alberga tu sonrisa.".split(/\./).inspect
"La penumbra, esa en la que se ocultan las tristezas contigo no se compara, el mismo color les abraza pero contigo la imaginación nace".split(/\./).inspect
"Un corto pero lleno de espacios y concentrado texto".split(/\s/).inspect

p "Un corto pero lleno de espacios y concentrado texto".split(/\s/) # Equivalente a <<inspect>>


