# Segundo día. Iteradores y bloques

5.times do puts "Segundo día" end # Hacemos uso del método times probablemente del Kernel porque es accesible sin clase. La instrucción 5.times.class => Enumerator

  #Si la instrucción consta de una sola instrucción se puede escribir como
  
  5.times {puts "En caso de que solo sea una instrucción"}
  
x = 0
x.upto(5) {puts (x+=1).to_s}

x = 10
x.downto(0) {puts (x-=1).to_s}

x = 0
x.step(10, 2){puts (x+=1).to_s} # 1 2 3 4 5 6
x = 0
x.step(10, 5){puts (x+1).to_s} # 1 2 3

  #Una manera más limpia de ver el resultado.
  
1.upto(5){|number| puts number} # De este modo se declara una variable <<number>> dentro del bloque y se imprime su valor 1 2 3 4 5

  # Es decir, el valor de cada iteración se almacena en |number|, éste es el modo en que Ruby para variables entre bloques.



10.downto(0){|number| puts number} # 10 9 8 7 6 5 4 3 2 1 0
0.step(10, 2){|number| puts number} # 0 2 4 6 8 10



# Nota de operaciones con float, debido a que Ruby considera todo número como entero a no ser que se indique explícitamente que es un decimal
# en el caso de un valor ingresado se puede solucionar convirtiendo on the fly el valor ingresado x.to_f y el proceso también se puede hacer para enteros x.to_i

#Las constantes en Ruby se definen con la primera letra de la variable en mayúscula.

Pi = 3.141592
  # De este modo, al tratar de cambiar el valor de la variable obtenemos una advertencia indicando que el valor de la constante se ha cambiado on the fly
  

# Strings

x = "String literal" # Por supuesto es un literal, el de la variable.

  #Cuando se desea incluir un string de multiples lineas se usa.
  
x = %q{ Según esto estas metido en líos
aún falta mucho y esto es puros objetos
esto se enreda} # De acuerdo a la documentación se puede usar cualquier par de llaves, incluso dos llaves iguales como !! pero en donde la IRB encuentre el par contrario o igual deja de interpretar líneas causando error por el resto del string

y = %q[ Este es otro ejemplo de string multilinea
de acuerdo a la documentación cualquier par de llaves sirve]

  #Finalmente disponemos del concepto <<here document>> 

x = <<CIERRA_AQUI
Se trata de un texto, un string representando un texto grande
en el que podemos escribir tanto hasta que se encuentre con la etiqueta que definimos
para cerrar el documento. Se inicia con dos símbolos de menor que y se define la
etiqueta en mayúsculas.
CIERRA_AQUI

puts "diego "*2 # diego diego
puts "a" > "b" # false
puts "a" < "b" # true
# Ya que los strings se pueden comparar es posible determinar el valor de cada caracter del siguiente modo.

puts "A".ord # 65
puts "a".ord # 97

# Lo contrario se puede obtener con

puts 65.chr # A
puts 97.chr # a

# Interpolación de strings (terminología de Ruby)



